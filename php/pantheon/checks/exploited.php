<?php
namespace Pantheon\Checks;

use Pantheon\Utils;
use Pantheon\Checkimplementation;
use Pantheon\Messenger;
use Pantheon\View;

class Exploited extends Checkimplementation {

  public function init() {
    $this->name = 'exploited';
    $this->action = 'No exploits found.';
    $this->description = 'Looking for exploited files.';
    $this->score = 0;
    $this->result = '';
    $this->label = 'Probable exploits';
    $this->key = 'exploits';
    $this->alerts = array();
    self::$instance = $this;
    return $this;
  }

  public function run($file) {
    $regex = '.*eval\(.*base64_decode\(.*';
    preg_match('#'.$regex.'#s',$file->getContents(), $matches, PREG_OFFSET_CAPTURE );
    if ( $matches ) {
      if (count($matches) > 1) {
        array_shift($matches);
      }
      foreach ($matches as $match) {
        $this->alerts[] = array($file->getRelativePathname(),  $match[1] + 1, substr($match[0],0,50));
      }
    }
    return $this;
  }

  public function message(Messenger $messenger) {
      if (!empty($this->alerts)) {
        $details = sprintf( "Found %s files that contain likely exploits \n\t-> %s",
          count($this->alerts),
          View::make('table',array('headers'=>array('File','Line','Match'),'rows'=>$this->alerts))
        );
        $this->score = 2;
        $this->result .= $details;
        $this->action = "You should deactivate this plugin unless you can verify this is the intended use.";
    }
    $messenger->addMessage(get_object_vars($this));
  }
}
